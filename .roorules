# Corbent Website Project Rules & Summary

## Project Purpose
- This project is the official website for Corbent.
- Its goal is to clearly explain Corbent's mission, showcase its revolutionary direct air capture technology (MOFs, electro-swing), highlight its advantages over conventional methods, outline the company roadmap, and provide information about the company.

## Key Technologies
- Next.js (App Router)
- React
- TypeScript
- Tailwind CSS
- shadcn/ui
- framer-motion (for animations)
- tRPC (likely for future API needs, based on initial setup)

## Design & Development Guidelines
- **UI Components:** Always use ShadN components where applicable ([`src/components/ui/`](src/components/ui/:0)). Maintain consistency with the chosen "new-york" style ([`components.json`](components.json:3)).
- **Color Theme:**
    - Primary: Teal (defined as `--primary` in [`src/styles/globals.css`](src/styles/globals.css:60))
    - Secondary: Orange/Coral (defined as `--secondary` in [`src/styles/globals.css`](src/styles/globals.css:63))
    - Use theme variables (`text-primary`, `bg-secondary`, etc.) instead of hardcoded colors or Tailwind color palette names (e.g., `text-teal-500`).
- **Animations:**
    - Use `framer-motion` for UI animations.
    - Apply consistent fade-in/slide-up animations to page sections using the reusable [`AnimatedSection`](src/components/layout/animated-section.tsx:0) component.
    - Use stagger animations for lists or grids of items (e.g., cards) where appropriate, utilizing `AnimatedSection` with `staggerChildren` prop and `itemVariants`.
    - Ensure components requiring animations or client-side hooks have the `"use client";` directive.
- **Layout:**
    - Header ([`Navbar`](src/components/layout/navbar.tsx:36)) should be sticky and transition background/shadow on scroll.
    - Maintain a consistent layout structure across pages.
- **Code Quality:** Address hydration errors and runtime errors promptly. Ensure proper component imports/exports.

## Recent Work (May 2025)
- **Animations Integration:** Implemented fade-in, slide-up, and stagger animations inspired by a v0.dev example across Home, Technology, and About pages using `framer-motion` and the `AnimatedSection` component.
- **Hero Section:** Added background grid and corner glow effects to the `HeroGeometric` component.
- **Header:** Implemented scroll-based background/shadow transition.
- **Bug Fixes:** Resolved hydration errors (whitespace, nested links) and runtime errors ("Element type is invalid") by adding `"use client";` directives and correcting component usage (`Link` with `NavigationMenuLink`).
- **Color Consistency:** Fixed instances of hardcoded colors (`text-teal-500`) to use theme variables (`text-primary`).
- **Cleanup:** Removed temporary `v0files` directory after integrating necessary styles/patterns.

## Tool Usage (Existing Rules)
- Use Context7 MCP Tool ([`github.com/upstash/context7-mcp`](github.com/upstash/context7-mcp:0)) to find applicable components and packages if you don't know about one. You can also use this to know about a library or a package.
- You can also use Serper and Fetch MCP Tools for something that Context can't satisfy. (Note: These MCPs were mentioned but may not be currently connected).
- If the user provides a URL for a component or package then use the fetch tool to scrape it and use that. (Note: Requires a connected Fetch MCP).
- Maintain a list of used ShadCN components in [`ShadCN-context.md`](ShadCN-context.md:0) (make one if it doesn't exist). It should contain all the components used and reference this to check if you need to install a ShadCN component from scratch with the CLI tool or not.